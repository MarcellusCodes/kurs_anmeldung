import type { NextPage, GetServerSideProps } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import {
  NavBar,
  PrimaryButton,
  NavButton,
  PrimaryTitle,
  Info,
  InfoItem,
  Course,
  CourseSection,
  CourseInfo,
  SecondaryTitle,
  FormTextInput,
  LayoutContainer,
} from "../../src/components/index";
import {
  ShieldLock,
  School,
  Users,
  CalendarEvent,
  WritingSign,
} from "tabler-icons-react";
import {
  Container,
  Title,
  Group,
  useMantineTheme,
  List,
  Divider,
  Space,
  TextInput,
  PasswordInput,
  Card,
} from "@mantine/core";
import { useForm } from "@mantine/form";

import { GetCourse } from "../../src/queries/index";
import { PostSendApplyCourse } from "../../src/mutations/index";
import { useQuery, useMutation } from "react-query";

const Anmeldung: NextPage = ({ course, id }) => {
  const theme = useMantineTheme();
  const form = useForm({
    initialValues: {
      name: "",
      vorname: "",
      bereich: "",
      kostenstelle: "",
    },
  });

  const courseQuery = useQuery("course", () => GetCourse(id), {
    initialData: course,
  });

  if (courseQuery.isLoading) {
    return "Loading";
  }

  const course_data = courseQuery.data.data && courseQuery.data.data;

  const applyInputs = [
    {
      id: 1,
      label: "Name",
      placeholder: "Kr√ºger",
      input_recognizer: form.getInputProps("name"),
    },
    {
      id: 2,
      label: "Vorname",
      placeholder: "John",
      input_recognizer: form.getInputProps("vorname"),
    },
    {
      id: 3,
      label: "Bereich",
      placeholder: "RW1",
      input_recognizer: form.getInputProps("bereich"),
    },
    {
      id: 4,
      label: "Kostenstelle",
      placeholder: "13426",
      input_recognizer: form.getInputProps("kostenstelle"),
    },
  ];

  return (
    <>
      <Head>
        <title>DRK Rostock Kurs Anmeldung</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar>
        <Link href="/" passHref>
          <NavButton
            onClick={() => {}}
            leftIcon={<School size={24} strokeWidth={2} color={"white"} />}
          >
            Kurse
          </NavButton>
        </Link>
      </NavBar>
      <LayoutContainer>
        <header>
          <PrimaryTitle
            icon={
              <WritingSign
                size={36}
                strokeWidth={2}
                color={theme.colors.red[6]}
              />
            }
            title={"Kurs Anmeldung"}
          />

          <Divider my="2rem" size="sm" />
        </header>

        <CourseInfo
          titel={courseQuery.data.data && courseQuery.data.data[0].titel}
          datum={courseQuery.data.data && courseQuery.data.data[0].datum}
          teilnehmer={
            courseQuery.data.data && courseQuery.data.data[0].teilnehmer
          }
          maximale_teilnehmer={
            courseQuery.data.data &&
            courseQuery.data.data[0].maximale_teilnehmer
          }
        />
        <Space h="2rem" />
        <Card
          sx={(theme) => ({
            maxWidth: 500,
            margin: "auto",
          })}
          shadow="sm"
          p="lg"
        >
          <SecondaryTitle
            sx={(theme) => ({
              textAlign: "center",
            })}
            title="Anmeldeformular"
          />
          <Space h="2rem" />
          <form
            onSubmit={form.onSubmit(async (values) => {
              const courseMutation = await PostSendApplyCourse(
                values.name,
                values.vorname,
                values.bereich,
                values.kostenstelle,
                id
              );
              console.log(await courseMutation);
            })}
          >
            {applyInputs.map((input) => (
              <>
                <FormTextInput
                  key={input.id}
                  label={input.label}
                  placeholder={input.placeholder}
                  input_recognizer={input.input_recognizer}
                />
                <Space h="1rem" />
              </>
            ))}
            <Space h="1rem" />
            <PrimaryButton
              color={"red"}
              compact={false}
              disabled={
                courseQuery.data.data &&
                courseQuery.data.data[0].teilnehmer.length ===
                  courseQuery.data.data &&
                courseQuery.data.data[0].maximale_teilnehmer
                  ? true
                  : false
              }
              fullWidth={true}
              leftIcon={undefined}
              loading={false}
              size={"md"}
              uppercase={false}
              type={"submit"}
              variant={"filled"}
              onClick={() => {}}
            >
              {courseQuery.data.data &&
              courseQuery.data.data[0].teilnehmer.length ===
                courseQuery.data.data &&
              courseQuery.data.data[0].maximale_teilnehmer
                ? "Kurs Voll"
                : "Anmelden"}
            </PrimaryButton>
          </form>
        </Card>
      </LayoutContainer>
    </>
  );
};

export default Anmeldung;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { query } = context;

  const id = query.id;

  const course_response = await GetCourse(id);

  const course = await course_response.data;

  return { props: { course, id } };
};
